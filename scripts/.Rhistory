head(countData)
head(metaData)
dds <- DESeqDataSetFromMatrix(countData=countData,
colData=metaData,
design=~genotype, tidy = TRUE)
# Look at the data
dds
dds <- DESeq(dds)
res <- results(dds)
head(results(dds, tidy=TRUE)) #let's look at the results table
summary(res) #summary of results
res <- res[order(res$padj),]
head(res)
# Export the results
write.csv(res, paste0(plotPath, "/", "DEresults_", compName,".csv"))
# Make the out file directory
dir.create(file.path(plotPath), showWarnings = FALSE)
# Export the results
write.csv(res, paste0(plotPath, "/", "DEresults_", compName,".csv"))
#we can use plotCounts fxn to compare the normalized counts
#between treated and control groups for our top 6 genes
par(mfrow=c(2,3))
plotCounts(dds, gene="Dmel_CG5568", intgroup="genotype")
plotCounts(dds, gene="Dmel_CG15848", intgroup="genotype")
plotCounts(dds, gene="Dmel_CG17322", intgroup="genotype")
plotCounts(dds, gene="Dmel_CG30401", intgroup="genotype")
plotCounts(dds, gene="Dmel_CG2961", intgroup="genotype")
plotCounts(dds, gene="Dmel_CG12787", intgroup="genotype")
#reset par
par(mfrow=c(1,1))
# Make a basic volcano plot
with(res, plot(log2FoldChange, -log10(pvalue), pch=20, main="Volcano plot", xlim=c(-3,3), ylim=c(0,50)))
# Add colored points: blue if padj<0.01, red if log2FC>1 and padj<0.05)
with(subset(res, padj<.05 ), points(log2FoldChange, -log10(pvalue), pch=20, col="blue"))
with(subset(res, padj<.05 & abs(log2FoldChange)>2), points(log2FoldChange, -log10(pvalue), pch=20, col="red"))
# Make a basic volcano plot
with(res, plot(log2FoldChange, -log10(pvalue), pch=20, main="Volcano plot", xlim=c(-3,3), ylim=c(0,40)))
# Make a basic volcano plot
with(res, plot(log2FoldChange, -log10(pvalue), pch=20, main="Volcano plot", xlim=c(-3,3), ylim=c(0,40)))
with(subset(res, padj<.05 & abs(log2FoldChange)>2), points(log2FoldChange, -log10(pvalue), pch=20, col="red"))
#First we need to transform the raw count data
#vst function will perform variance stabilizing transformation
vsdata <- vst(dds, blind=FALSE)
png(
paste0(plotPath, "/", "PCAplot_", compName, ".jpg"),
width     = 3.25,
height    = 3.25,
units     = "in",
res       = 1200,
pointsize = 4
)
par(
mar      = c(5, 5, 2, 2),
xaxs     = "i",
yaxs     = "i",
cex.axis = 2,
cex.lab  = 2
)
plotPCA(vsdata, intgroup="genotype")
dev.off()
# Customize by run
plotPath = "C:/nordman/deseq2/results_c2"
compName = "comp2"
# Make the out file directory
dir.create(file.path(plotPath), showWarnings = FALSE)
# Import comparison data
# File encoding prevents column header issues
countData <- read.csv(paste0('C:/nordman/deseq2/', compName, '.csv'), header = TRUE, sep = ",", fileEncoding="UTF-8-BOM")
metaData <- read.csv(paste0('C:/nordman/deseq2/', compName, '_metadata.csv'), header = TRUE, sep = ",", fileEncoding="UTF-8-BOM")
# Convert metadata design column to factor
metaData$genotype = as.factor(metaData$genotype)
# Look at both
head(countData)
head(metaData)
dds <- DESeqDataSetFromMatrix(countData=countData,
colData=metaData,
design=~genotype, tidy = TRUE)
# Look at the data
dds
dds <- DESeq(dds)
res <- results(dds)
head(results(dds, tidy=TRUE)) #let's look at the results table
summary(res) #summary of results
res <- res[order(res$padj),]
head(res)
# Export the results
write.csv(res, paste0(plotPath, "/", "DEresults_", compName,".csv"))
#we can use plotCounts fxn to compare the normalized counts
#between treated and control groups for our top 6 genes
par(mfrow=c(2,3))
plotCounts(dds, gene="Dmel_CG5568", intgroup="genotype")
plotCounts(dds, gene="Dmel_CG15848", intgroup="genotype")
plotCounts(dds, gene="Dmel_CG17322", intgroup="genotype")
plotCounts(dds, gene="Dmel_CG30401", intgroup="genotype")
plotCounts(dds, gene="Dmel_CG2961", intgroup="genotype")
plotCounts(dds, gene="Dmel_CG12787", intgroup="genotype")
#reset par
par(mfrow=c(1,1))
# Make a basic volcano plot
with(res, plot(log2FoldChange, -log10(pvalue), pch=20, main="Volcano plot", xlim=c(-3,3), ylim=c(0,40)))
# Add colored points: blue if padj<0.01, red if log2FC>1 and padj<0.05)
#with(subset(res, padj<.05 ), points(log2FoldChange, -log10(pvalue), pch=20, col="blue"))
with(subset(res, padj<.05 & abs(log2FoldChange)>2), points(log2FoldChange, -log10(pvalue), pch=20, col="red"))
#First we need to transform the raw count data
#vst function will perform variance stabilizing transformation
vsdata <- vst(dds, blind=FALSE)
png(
paste0(plotPath, "/", "PCAplot_", compName, ".jpg"),
width     = 3.25,
height    = 3.25,
units     = "in",
res       = 1200,
pointsize = 4
)
par(
mar      = c(5, 5, 2, 2),
xaxs     = "i",
yaxs     = "i",
cex.axis = 2,
cex.lab  = 2
)
plotPCA(vsdata, intgroup="genotype")
dev.off()
# Customize by run
plotPath = "C:/nordman/deseq2/results_c3"
compName = "comp3"
# Make the out file directory
dir.create(file.path(plotPath), showWarnings = FALSE)
# Import comparison data
# File encoding prevents column header issues
countData <- read.csv(paste0('C:/nordman/deseq2/', compName, '.csv'), header = TRUE, sep = ",", fileEncoding="UTF-8-BOM")
metaData <- read.csv(paste0('C:/nordman/deseq2/', compName, '_metadata.csv'), header = TRUE, sep = ",", fileEncoding="UTF-8-BOM")
# Convert metadata design column to factor
metaData$genotype = as.factor(metaData$genotype)
# Look at both
head(countData)
head(metaData)
dds <- DESeqDataSetFromMatrix(countData=countData,
colData=metaData,
design=~genotype, tidy = TRUE)
# Look at the data
dds
dds <- DESeq(dds)
res <- results(dds)
head(results(dds, tidy=TRUE)) #let's look at the results table
summary(res) #summary of results
res <- res[order(res$padj),]
head(res)
# Export the results
write.csv(res, paste0(plotPath, "/", "DEresults_", compName,".csv"))
#we can use plotCounts fxn to compare the normalized counts
#between treated and control groups for our top 6 genes
par(mfrow=c(2,3))
plotCounts(dds, gene="Dmel_CG5568", intgroup="genotype")
plotCounts(dds, gene="Dmel_CG15848", intgroup="genotype")
plotCounts(dds, gene="Dmel_CG17322", intgroup="genotype")
plotCounts(dds, gene="Dmel_CG30401", intgroup="genotype")
plotCounts(dds, gene="Dmel_CG2961", intgroup="genotype")
plotCounts(dds, gene="Dmel_CG12787", intgroup="genotype")
#reset par
par(mfrow=c(1,1))
# Make a basic volcano plot
with(res, plot(log2FoldChange, -log10(pvalue), pch=20, main="Volcano plot", xlim=c(-3,3), ylim=c(0,40)))
# Add colored points: blue if padj<0.01, red if log2FC>1 and padj<0.05)
#with(subset(res, padj<.05 ), points(log2FoldChange, -log10(pvalue), pch=20, col="blue"))
with(subset(res, padj<.05 & abs(log2FoldChange)>2), points(log2FoldChange, -log10(pvalue), pch=20, col="red"))
#First we need to transform the raw count data
#vst function will perform variance stabilizing transformation
vsdata <- vst(dds, blind=FALSE)
png(
paste0(plotPath, "/", "PCAplot_", compName, ".jpg"),
width     = 3.25,
height    = 3.25,
units     = "in",
res       = 1200,
pointsize = 4
)
par(
mar      = c(5, 5, 2, 2),
xaxs     = "i",
yaxs     = "i",
cex.axis = 2,
cex.lab  = 2
)
plotPCA(vsdata, intgroup="genotype")
dev.off()
# Customize by run
plotPath = "C:/nordman/deseq2/results_c4"
compName = "comp4"
# Make the out file directory
dir.create(file.path(plotPath), showWarnings = FALSE)
# Import comparison data
# File encoding prevents column header issues
countData <- read.csv(paste0('C:/nordman/deseq2/', compName, '.csv'), header = TRUE, sep = ",", fileEncoding="UTF-8-BOM")
metaData <- read.csv(paste0('C:/nordman/deseq2/', compName, '_metadata.csv'), header = TRUE, sep = ",", fileEncoding="UTF-8-BOM")
# Convert metadata design column to factor
metaData$genotype = as.factor(metaData$genotype)
# Look at both
head(countData)
head(metaData)
dds <- DESeqDataSetFromMatrix(countData=countData,
colData=metaData,
design=~genotype, tidy = TRUE)
# Look at the data
dds
dds <- DESeq(dds)
res <- results(dds)
head(results(dds, tidy=TRUE)) #let's look at the results table
summary(res) #summary of results
res <- res[order(res$padj),]
head(res)
# Export the results
write.csv(res, paste0(plotPath, "/", "DEresults_", compName,".csv"))
#we can use plotCounts fxn to compare the normalized counts
#between treated and control groups for our top 6 genes
par(mfrow=c(2,3))
plotCounts(dds, gene="Dmel_CG5568", intgroup="genotype")
plotCounts(dds, gene="Dmel_CG15848", intgroup="genotype")
plotCounts(dds, gene="Dmel_CG17322", intgroup="genotype")
plotCounts(dds, gene="Dmel_CG30401", intgroup="genotype")
plotCounts(dds, gene="Dmel_CG2961", intgroup="genotype")
plotCounts(dds, gene="Dmel_CG12787", intgroup="genotype")
#reset par
par(mfrow=c(1,1))
# Make a basic volcano plot
with(res, plot(log2FoldChange, -log10(pvalue), pch=20, main="Volcano plot", xlim=c(-3,3), ylim=c(0,40)))
# Add colored points: blue if padj<0.01, red if log2FC>1 and padj<0.05)
#with(subset(res, padj<.05 ), points(log2FoldChange, -log10(pvalue), pch=20, col="blue"))
with(subset(res, padj<.05 & abs(log2FoldChange)>2), points(log2FoldChange, -log10(pvalue), pch=20, col="red"))
#First we need to transform the raw count data
#vst function will perform variance stabilizing transformation
vsdata <- vst(dds, blind=FALSE)
png(
paste0(plotPath, "/", "PCAplot_", compName, ".jpg"),
width     = 3.25,
height    = 3.25,
units     = "in",
res       = 1200,
pointsize = 4
)
par(
mar      = c(5, 5, 2, 2),
xaxs     = "i",
yaxs     = "i",
cex.axis = 2,
cex.lab  = 2
)
plotPCA(vsdata, intgroup="genotype")
dev.off()
BiocManager::install("rtracklayer")
#BiocManager::install("rtracklayer")
library(rtracklayer)
x = readGFF("C:/nordman/genomefiles/dm6_annotation.gtf")
x = readGFF("C:/nordman/genomefiles/dm6.gtf")
colnames(x)
head(x)
rc = read.csv("C:/nordman/deseq2/DEresults_comp1.csv", header = TRUE)
rc = read.csv("C:/nordman/deseq2/results_c1/DEresults_comp1.csv", header = TRUE)
head(rc)
colnames(rc)
colnames(rc)[1]
colnames(rc)[1] = "gene_id"
colnames(rc)
annotations = readGFF("C:/nordman/genomefiles/dm6.gtf")
rc_annotated = left_join(rc, annotations, by="gene_id")
library(dplyr)
rc_annotated = left_join(rc, annotations, by="gene_id")
head(rc)
head(rc_annotated)
inputFolder = "C:/nordman/deseq2/results_c1/"
deFile = "DEresults_comp1.csv"
# Customize
inputFolder = "C:/nordman/deseq2/results_c1/"
deFile = "DEresults_comp1.csv"
annotations = readGFF("C:/nordman/genomefiles/dm6.gtf")
# Script
colnames(x)
head(x)
rc = read.csv(paste0(inputFolder, deFile), header = TRUE)
head(rc)
colnames(rc)
colnames(rc)[1] = "gene_id"
colnames(rc)
rc_annotated = left_join(rc, annotations, by="gene_id")
head(rc_annotated)
# Script
annotatedOutFile = paste0("Annotated_", deFile)
# Script
annotatedOutFile = paste0(inputFolder, "Annotated_", deFile)
# Save annotated file
write.csv()
# Save annotated file
write.csv(rc_annotated, annotatedOutFile)
# Remove duplicate annotations
colnames(annotations)
annotations$transctipt_id
annotations$transcript_id
# Remove duplicate annotations
colnames(annotations)
annotations$gene_id
annotations[gene_id == "Dmel_CR42744"]
annotations[gene_id == "Dmel_CR42744",]
annotations[gene_id = "Dmel_CR42744",]
annotations[annotations$gene_id = "Dmel_CR42744",]
annotations[annotations$gene_id == "Dmel_CR42744",]
a = annotations[annotations$type != "exon",]
head(a)
b = a[!duplicated(a$gene_id),]
head(b)
annotatedOutFileName
# Script
annotatedOutFileName = paste0(inputFolder, "Annotated_", deFile)
annotatedOutFileName
colnames(x)
rc = read.csv(paste0(inputFolder, deFile), header = TRUE)
head(rc)
colnames(rc)[1] = "gene_id"
colnames(rc)
# remove exon entries
annotations = annotations[annotations$type != "exon",]
# remove duplicates
annotations = a[!duplicated(a$gene_id),]
rc_annotated = left_join(rc, annotations, by="gene_id")
rc_annotated
# Save annotated file
write.csv(rc_annotated, annotatedOutFileName)
# remove other rows
bc = c("note", "orig_transcript_id","product transcript_biotype", "exon_number orig_protein_id")
b = annotations[,-bc]
b = annotations[ , -which(names(annotations) %in% bc)]
b
which(names(annotations) %in% bc)
names(annotations)
-which(bc %in% names(annotations))
which(bc %in% names(annotations))
b = subset(annotations, select=-bc)
b = subset(annotations, select=c("note", "orig_transcript_id","product transcript_biotype", "exon_number orig_protein_id"))
b = subset(annotations, select=c(note, orig_transcript_id, product, transcript_biotype, exon_number, orig_protein_id))
b
b = subset(annotations, select=-c(note, orig_transcript_id, product, transcript_biotype, exon_number, orig_protein_id))
head(b)
colnames(annotations)
head(annotations)
head(b)
# remove other rows
b = subset(annotations, select=-c(note, orig_transcript_id, product,
transcript_biotype, exon_number, orig_protein_id, transl_table, codons,
partial, inference, exception))
head(b)
# remove other rows
b = subset(annotations, select=-c(note, orig_transcript_id, product,
transcript_biotype, exon_number, orig_protein_id, transl_table, codons,
partial, inference, exception, part, pseudo, transl_except))
head(b)
# remove other rows
annotations = subset(annotations, select=-c(note, orig_transcript_id, product,
transcript_biotype, exon_number, orig_protein_id, transl_table, codons,
partial, inference, exception, part, pseudo, transl_except))
head(annotations)
# Script
annotatedOutFileName = paste0(inputFolder, "Annotated_", deFile)
rc = read.csv(paste0(inputFolder, deFile), header = TRUE)
head(rc)
colnames(rc)[1] = "gene_id"
colnames(rc)
rc_annotated = left_join(rc, annotations, by="gene_id")
head(rc_annotated)
rc_annotated = left_join(rc, annotations, by="gene_id")
head(rc_annotated)
unique(rc_annotated$protein_id)
unique(rc_annotated$old_locus_tag)
unique(rc_annotated$protein_id)
# remove other rows
annotations = subset(annotations, select=-c(note, orig_transcript_id, product,
transcript_biotype, exon_number, orig_protein_id, transl_table, codons,
partial, inference, exception, part, pseudo, transl_except, protein_id))
head(annotations)
# Script
annotatedOutFileName = paste0(inputFolder, "Annotated_", deFile)
rc = read.csv(paste0(inputFolder, deFile), header = TRUE)
head(rc)
colnames(rc)[1] = "gene_id"
colnames(rc)
rc_annotated = left_join(rc, annotations, by="gene_id")
head(rc_annotated)
# Save annotated file
write.csv(rc_annotated, annotatedOutFileName)
# Save annotated file
write.csv(rc_annotated, annotatedOutFileName)
# Save annotated file
write.csv(rc_annotated, annotatedOutFileName, row.names = FALSE)
annotations = readGFF("C:/nordman/genomefiles/dm6.gtf")
# Remove duplicate annotations
colnames(annotations)
# remove exon entries
annotations = annotations[annotations$type != "exon",]
# remove duplicates
annotations = annotations[!duplicated(annotations$gene_id),]
# remove other rows
annotations = subset(annotations, select=-c(note, orig_transcript_id, product,
transcript_biotype, exon_number, orig_protein_id, transl_table, codons,
partial, inference, exception, part, pseudo, transl_except, protein_id,
source,	type, score, phase, transcript_id))
head(annotations)
# remove other rows
annotations = subset(annotations, select=-c(note, orig_transcript_id, product,
transcript_biotype, exon_number, orig_protein_id, transl_table, codons,
partial, inference, exception, part, pseudo, transl_except, protein_id,
source,	type, score, phase, transcript_id, gbkey))
annotations = readGFF("C:/nordman/genomefiles/dm6.gtf")
# Remove duplicate annotations
colnames(annotations)
# remove exon entries
annotations = annotations[annotations$type != "exon",]
# remove duplicates
annotations = annotations[!duplicated(annotations$gene_id),]
# remove other rows
annotations = subset(annotations, select=-c(note, orig_transcript_id, product,
transcript_biotype, exon_number, orig_protein_id, transl_table, codons,
partial, inference, exception, part, pseudo, transl_except, protein_id,
source,	type, score, phase, transcript_id, gbkey))
head(annotations)
# Script
annotatedOutFileName = paste0(inputFolder, "Annotated_", deFile)
rc = read.csv(paste0(inputFolder, deFile), header = TRUE)
head(rc)
colnames(rc)[1] = "gene_id"
colnames(rc)
rc_annotated = left_join(rc, annotations, by="gene_id")
head(rc_annotated)
# Save annotated file
write.csv(rc_annotated, annotatedOutFileName, row.names = FALSE)
# Save annotated file
write.csv(rc_annotated, annotatedOutFileName, row.names = FALSE)
# Customize
inputFolder = "C:/nordman/deseq2/results_c2/"
deFile = "DEresults_comp2.csv"
annotations = readGFF("C:/nordman/genomefiles/dm6.gtf")
# Remove duplicate annotations
colnames(annotations)
# remove exon entries
annotations = annotations[annotations$type != "exon",]
# remove duplicates
annotations = annotations[!duplicated(annotations$gene_id),]
# remove other rows
annotations = subset(annotations, select=-c(note, orig_transcript_id, product,
transcript_biotype, exon_number, orig_protein_id, transl_table, codons,
partial, inference, exception, part, pseudo, transl_except, protein_id,
source,	type, score, phase, transcript_id, gbkey))
head(annotations)
# Script
annotatedOutFileName = paste0(inputFolder, "Annotated_", deFile)
rc = read.csv(paste0(inputFolder, deFile), header = TRUE)
head(rc)
colnames(rc)[1] = "gene_id"
colnames(rc)
rc_annotated = left_join(rc, annotations, by="gene_id")
head(rc_annotated)
# Save annotated file
write.csv(rc_annotated, annotatedOutFileName, row.names = FALSE)
# Customize
inputFolder = "C:/nordman/deseq2/results_c3/"
deFile = "DEresults_comp3.csv"
annotations = readGFF("C:/nordman/genomefiles/dm6.gtf")
# Remove duplicate annotations
colnames(annotations)
# remove exon entries
annotations = annotations[annotations$type != "exon",]
# remove duplicates
annotations = annotations[!duplicated(annotations$gene_id),]
# remove other rows
annotations = subset(annotations, select=-c(note, orig_transcript_id, product,
transcript_biotype, exon_number, orig_protein_id, transl_table, codons,
partial, inference, exception, part, pseudo, transl_except, protein_id,
source,	type, score, phase, transcript_id, gbkey))
head(annotations)
# Script
annotatedOutFileName = paste0(inputFolder, "Annotated_", deFile)
rc = read.csv(paste0(inputFolder, deFile), header = TRUE)
head(rc)
colnames(rc)[1] = "gene_id"
colnames(rc)
rc_annotated = left_join(rc, annotations, by="gene_id")
head(rc_annotated)
# Save annotated file
write.csv(rc_annotated, annotatedOutFileName, row.names = FALSE)
# Customize
inputFolder = "C:/nordman/deseq2/results_c4/"
deFile = "DEresults_comp4.csv"
annotations = readGFF("C:/nordman/genomefiles/dm6.gtf")
# Remove duplicate annotations
colnames(annotations)
# remove exon entries
annotations = annotations[annotations$type != "exon",]
# remove duplicates
annotations = annotations[!duplicated(annotations$gene_id),]
# remove other rows
annotations = subset(annotations, select=-c(note, orig_transcript_id, product,
transcript_biotype, exon_number, orig_protein_id, transl_table, codons,
partial, inference, exception, part, pseudo, transl_except, protein_id,
source,	type, score, phase, transcript_id, gbkey))
head(annotations)
# Script
annotatedOutFileName = paste0(inputFolder, "Annotated_", deFile)
rc = read.csv(paste0(inputFolder, deFile), header = TRUE)
head(rc)
colnames(rc)[1] = "gene_id"
colnames(rc)
rc_annotated = left_join(rc, annotations, by="gene_id")
head(rc_annotated)
# Save annotated file
write.csv(rc_annotated, annotatedOutFileName, row.names = FALSE)
